<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.midproject.tripin.repositiory.DetailReviewRepo">

  <!-- 리뷰 등록 -->
  <insert id="insertReview" parameterType="ReviewVO">
    INSERT INTO REVIEWS (
      REVIEW_ID,
      USER_ID,
      DEST_ID,
      RATING,
      CONTENT,
      CREATED_AT,
      IMAGE_PATH
    ) VALUES (
      SEQ_REVIEWS_ID.NEXTVAL,
      #{user_id},
      #{dest_id},
      #{rating},
      #{content, jdbcType=VARCHAR},
      SYSDATE,
      #{image_path, jdbcType=VARCHAR}
    )
  </insert>


  
 <!-- 리뷰 조회 (최신순) -->
<select id="getReviewsByDestId" resultType="com.midproject.tripin.model.ReviewVO">
  SELECT 
    r.REVIEW_ID     AS review_id,
    r.USER_ID       AS user_id,
    r.DEST_ID       AS dest_id,
    r.RATING        AS rating,
    r.CONTENT       AS content,
    r.CREATED_AT    AS created_at,
    r.IMAGE_PATH    AS image_path,
    u.USER_NAME     AS user_name   

  FROM REVIEWS r                 
  JOIN USERS u ON r.USER_ID = u.USER_ID  
  
  WHERE r.DEST_ID = #{dest_id}
  ORDER BY r.CREATED_AT DESC
</select>


  <!-- 리뷰 조회 (별점순) -->
  <select id="getReviewsSortedByRating" resultType="ReviewVO">
    SELECT 
      REVIEW_ID     AS review_id,
      USER_ID       AS user_id,
      DEST_ID       AS dest_id,
      RATING        AS rating,
      CONTENT       AS content,
      CREATED_AT    AS created_at,
      IMAGE_PATH    AS image_path
    FROM REVIEWS
    WHERE DEST_ID = #{dest_id}
    ORDER BY RATING DESC, CREATED_AT DESC
  </select>

  <!-- 리뷰 수정 -->
  <update id="updateReview" parameterType="ReviewVO">
    UPDATE REVIEWS
    SET 
      RATING = #{rating},
      CONTENT = #{content},
      IMAGE_PATH = #{image_path}
    WHERE USER_ID = #{user_id} AND REVIEW_ID = #{review_id}
  </update>

  <!-- 리뷰 삭제 -->
  <delete id="deleteReview" parameterType="map">
    DELETE FROM REVIEWS
    WHERE USER_ID = #{user_id} AND REVIEW_ID = #{review_id}
  </delete>

  <!-- 리뷰 신고 카운트 증가 -->
  <update id="incrementReportCount" parameterType="int">
    UPDATE REVIEWS
    SET REPORT_COUNT = REPORT_COUNT + 1
    WHERE REVIEW_ID = #{review_id}
  </update>

  <!-- 여행지 ID 존재 확인 (contentId로) -->
  <select id="findDestIdByContentId" parameterType="string" resultType="int">
    SELECT DEST_ID
    FROM DESTS
    WHERE CONTENT_ID = #{contentId}
  </select>

  <!-- 여행지 추가 (contentId 포함) -->
  <insert id="insertDestinationWithContentId">
    INSERT INTO DESTS (DEST_ID, DEST_NAME, CONTENT_ID)
    VALUES (DEST_SEQ.NEXTVAL, #{name}, #{contentId})
  </insert>

  <!-- 여행지 이름 조회 (destId로) -->
  <select id="findNameByDestId" parameterType="int" resultType="string">
    SELECT DEST_NAME
    FROM DESTS
    WHERE DEST_ID = #{dest_id}
  </select>

  <!-- 여행지 ContentId 조회 (destId로) -->
  <select id="findContentIdByDestId" parameterType="int" resultType="string">
    SELECT CONTENT_ID
    FROM DESTS
    WHERE DEST_ID = #{dest_id}
  </select>

  <!-- 여행지 상세 조회 (destId로) -->
  <select id="getPlaceByDestId" resultType="PlaceVO">
    SELECT * FROM DESTS
    WHERE DEST_ID = #{dest_id}
  </select>

  <!-- 검색어 기반 장소 검색 -->
  <select id="searchPlacesByKeyword" parameterType="string" resultType="PlaceVO">
    SELECT 
      DEST_ID, 
      DEST_NAME
    FROM DESTS
    WHERE DEST_NAME LIKE '%' || #{keyword} || '%'
       OR REL_KEYWORDS LIKE '%' || #{keyword} || '%'
  </select>

  <!-- 좋아요 여부 확인 -->
  <select id="countLike" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM FAV_DESTS
    WHERE USER_ID = #{user_id} AND DEST_ID = #{dest_id}
  </select>

  <!-- 좋아요 추가 -->
  <insert id="insertLike" parameterType="map">
    INSERT INTO FAV_DESTS (USER_ID, DEST_ID, ADDED_AT)
    VALUES (#{user_id}, #{dest_id}, SYSDATE)
  </insert>

  <!-- 좋아요 삭제 -->
  <delete id="deleteLike" parameterType="map">
    DELETE FROM FAV_DESTS
    WHERE USER_ID = #{user_id} AND DEST_ID = #{dest_id}
  </delete>

  <!-- 랜덤 여행지 이름 7개 반환 -->
  <select id="getRandomDestNames" resultType="String">
    SELECT DEST_NAME
    FROM (
      SELECT DISTINCT DEST_NAME
      FROM DESTS
      WHERE DEST_NAME IS NOT NULL
      ORDER BY DBMS_RANDOM.VALUE
    )
    WHERE ROWNUM &lt;= 7
  </select>

  <!-- 여행지 전체 조회 (키워드, 테마, 정렬 포함) -->
  <select id="getAllPlaces" parameterType="hashmap" resultType="PlaceVO">
    SELECT *
    FROM (
      SELECT *
      FROM DESTS D
      LEFT JOIN DEST_THEMES DT ON DT.DEST_ID = D.DEST_ID
      LEFT JOIN THEMES T ON T.THEME_ID = DT.THEME_ID
      LEFT JOIN REVIEWS R ON D.DEST_ID = R.DEST_ID
      <where>
        <if test="searchKeyword != null">
          (DEST_NAME LIKE '%${searchKeyword}%'
           OR FULL_ADDRESS LIKE '%${searchKeyword}%')
        </if>
        <if test="theme != null">
          AND T.THEME_NAME = #{theme}
        </if>
      </where>
      <choose>
        <when test="sort == '별점순'">
          ORDER BY RATING DESC
        </when>
        <otherwise>
          ORDER BY DBMS_RANDOM.VALUE
        </otherwise>
      </choose>
    )
  </select>

  <!-- 테마로 장소 조회 -->
  <select id="getPlaceByTheme" parameterType="PlaceVO" resultType="PlaceVO">
    SELECT D.*
    FROM DESTS D
    JOIN DEST_THEMES DT ON DT.DEST_ID = D.DEST_ID
    JOIN THEMES T ON T.THEME_ID = DT.THEME_ID
    WHERE DT.THEME_ID = #{theme_id}
  </select>

  <!-- 테마 조회수 증가 -->
  <update id="updateViewCnt" parameterType="int">
    UPDATE THEMES
    SET THEME_CNT = NVL(THEME_CNT, 0) + 1
    WHERE THEME_ID = #{theme_id}
  </update>

  <select id="getRandomReviews" resultType="ReviewVO">
    SELECT *
    FROM (
      SELECT *
      FROM REVIEWS
      ORDER BY DBMS_RANDOM.VALUE
    )
    WHERE ROWNUM &lt;= 3
  </select>


</mapper>
